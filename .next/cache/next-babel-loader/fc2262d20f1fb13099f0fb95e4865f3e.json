{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/home/jean/Documents/www/fullstacklab/mydailystatus/pages/create-status.js\";\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\n\nvar CreateStatus = function CreateStatus() {\n  var _useState = useState({\n    status: 'bem',\n    coords: {\n      lat: null,\n      \"long\": null\n    }\n  }),\n      dados = _useState[0],\n      setDados = _useState[1];\n\n  var getMyLocation = function getMyLocation() {\n    //se o navegador tiver a funcionalidade de geolocalização\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        //define uma função que pega a versão antiga dos dados e retorna uma versão nova\n        setDados(function (old) {\n          return _objectSpread({}, old, {\n            coords: {\n              lat: position.coords.latitude,\n              \"long\": position.coords.longitude\n            }\n          });\n        });\n      });\n    }\n  };\n\n  var onStatusChange = function onStatusChange(evt) {\n    var value = evt.target.value;\n    setDados(function (old) {\n      return _objectSpread({}, old, {\n        status: value\n      });\n    });\n  };\n\n  var save = function save() {\n    return _regeneratorRuntime.async(function save$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios.post('/api/save-status', dados));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return __jsx(\"div\", {\n    className: \"text-center max-w-xs bg-pink-800 mx-auto my-4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, \"Create Status\"), __jsx(\"label\", {\n    className: \"block white\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    name: \"status\",\n    value: \"bem\",\n    onClick: onStatusChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }), \"Estou bem e sem sintomas.\"), __jsx(\"label\", {\n    className: \"block\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    name: \"status\",\n    value: \"gripe\",\n    onClick: onStatusChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }), \"Estou com sintomas de gripe / resfriado.\"), __jsx(\"label\", {\n    className: \"block\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"radio\",\n    name: \"status\",\n    value: \"covid\",\n    onClick: onStatusChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }), \"Estou com sintomas de COVID.\"), \"Sua posi\\xE7\\xE3o atual: \", JSON.stringify(dados), __jsx(\"button\", {\n    className: \"my-2 py-4 px-2 rounded bg-pink-800 font-bold shadow-xl hover:shadow block w-1/4 text-center mx-auto text-white\",\n    onClick: getMyLocation,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, \"Pegar minha localiza\\xE7\\xE3o\"), __jsx(\"button\", {\n    className: \"my-2 py-4 px-2 rounded bg-pink-800 font-bold shadow-xl hover:shadow block w-1/4 text-center mx-auto text-white\",\n    onClick: save,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, \"Salvar meu status\"));\n};\n\nexport var __N_SSP = true;\nexport default CreateStatus; //verificar se o usuario ta logado","map":{"version":3,"sources":["/home/jean/Documents/www/fullstacklab/mydailystatus/pages/create-status.js"],"names":["React","useState","axios","CreateStatus","status","coords","lat","dados","setDados","getMyLocation","navigator","geolocation","getCurrentPosition","position","old","latitude","longitude","onStatusChange","evt","value","target","save","post","JSON","stringify"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAAA,kBACCF,QAAQ,CAAC;AACjCG,IAAAA,MAAM,EAAE,KADyB;AAEjCC,IAAAA,MAAM,EAAE;AACNC,MAAAA,GAAG,EAAE,IADC;AAEN,cAAM;AAFA;AAFyB,GAAD,CADT;AAAA,MAClBC,KADkB;AAAA,MACXC,QADW;;AAQzB,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B;AACA,QAAIC,SAAS,CAACC,WAAd,EAA2B;AACzBD,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAAAC,QAAQ,EAAI;AACnD;AACAL,QAAAA,QAAQ,CAAC,UAAAM,GAAG,EAAI;AACd,mCAEKA,GAFL;AAGET,YAAAA,MAAM,EAAC;AACLC,cAAAA,GAAG,EAAEO,QAAQ,CAACR,MAAT,CAAgBU,QADhB;AAEL,sBAAMF,QAAQ,CAACR,MAAT,CAAgBW;AAFjB;AAHT;AAQD,SATO,CAAR;AAUD,OAZD;AAaD;AACF,GAjBD;;AAmBA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,GAAG,EAAI;AAC5B,QAAMC,KAAK,GAAGD,GAAG,CAACE,MAAJ,CAAWD,KAAzB;AACAX,IAAAA,QAAQ,CAAC,UAAAM,GAAG,EAAI;AACd,+BAEKA,GAFL;AAGEV,QAAAA,MAAM,EAAEe;AAHV;AAKD,KANO,CAAR;AAOD,GATD;;AAWA,MAAME,IAAI,GAAG,SAAPA,IAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACLnB,KAAK,CAACoB,IAAN,CAAW,kBAAX,EAA+Bf,KAA/B,CADK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAb;;AAKA,SACE;AAAK,IAAA,SAAS,EAAC,+CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAGE;AAAO,IAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,IAAI,EAAC,QAAzB;AAAkC,IAAA,KAAK,EAAC,KAAxC;AAA8C,IAAA,OAAO,EAAEU,cAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,8BAHF,EAOE;AAAO,IAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,IAAI,EAAC,QAAzB;AAAkC,IAAA,KAAK,EAAC,OAAxC;AAAgD,IAAA,OAAO,EAAEA,cAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,6CAPF,EAWE;AAAO,IAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,IAAI,EAAC,QAAzB;AAAkC,IAAA,KAAK,EAAC,OAAxC;AAAgD,IAAA,OAAO,EAAEA,cAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,iCAXF,+BAesBM,IAAI,CAACC,SAAL,CAAejB,KAAf,CAftB,EAgBE;AAAQ,IAAA,SAAS,EAAC,gHAAlB;AAAmI,IAAA,OAAO,EAAEE,aAA5I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAhBF,EAiBE;AAAQ,IAAA,SAAS,EAAC,gHAAlB;AAAmI,IAAA,OAAO,EAAEY,IAA5I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAjBF,CADF;AAqBD,CAhED;;;AAiEA,eAAelB,YAAf,C,CAEA","sourcesContent":["import React, { useState } from 'react';\nimport auth0 from '../lib/auth0';\nimport axios from 'axios';\n\nconst CreateStatus = () => {\n  const [dados, setDados] = useState({\n    status: 'bem',\n    coords: {\n      lat: null,\n      long: null,\n    }\n  })\n  const getMyLocation = () => {\n    //se o navegador tiver a funcionalidade de geolocalização\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        //define uma função que pega a versão antiga dos dados e retorna uma versão nova\n        setDados(old => {\n          return {\n            //pega tudo que já tava na variável dados\n            ...old,\n            coords:{\n              lat: position.coords.latitude,\n              long: position.coords.longitude,\n            }\n          };\n        });\n      });\n    }\n  };\n\n  const onStatusChange = evt => {\n    const value = evt.target.value;\n    setDados(old => {\n      return {\n        //pega tudo que já tava na variável dados\n        ...old,\n        status: value\n      };\n    });\n  };\n\n  const save = async() => {\n    await axios.post('/api/save-status', dados);\n  };\n\n\n  return (\n    <div className='text-center max-w-xs bg-pink-800 mx-auto my-4'>\n      <h1>Create Status</h1>\n      \n      <label className='block white'>\n        <input type='radio' name='status' value='bem' onClick={onStatusChange}/>Estou bem e sem sintomas.\n      </label>\n      \n      <label className='block'>\n        <input type='radio' name='status' value='gripe' onClick={onStatusChange}/>Estou com sintomas de gripe / resfriado.\n      </label>\n      \n      <label className='block'>\n        <input type='radio' name='status' value='covid' onClick={onStatusChange}/>Estou com sintomas de COVID.\n      </label>\n\n      Sua posição atual: {JSON.stringify(dados)}\n      <button className='my-2 py-4 px-2 rounded bg-pink-800 font-bold shadow-xl hover:shadow block w-1/4 text-center mx-auto text-white' onClick={getMyLocation}>Pegar minha localização</button>\n      <button className='my-2 py-4 px-2 rounded bg-pink-800 font-bold shadow-xl hover:shadow block w-1/4 text-center mx-auto text-white' onClick={save}>Salvar meu status</button>\n    </div>\n  );\n};\nexport default CreateStatus;\n\n//verificar se o usuario ta logado\nexport async function getServerSideProps({ req, res }) {\n  const session = await auth0.getSession(req);\n  if (session) {\n    return {\n      props: {\n        isAuth: true,\n        user: session.user,\n      }\n    }\n  }\n  return {\n    props: {\n      isAuth: false,\n      user: {}\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}